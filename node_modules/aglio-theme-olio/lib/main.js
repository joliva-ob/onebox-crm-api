// Generated by CoffeeScript 1.8.0
(function() {
  var ROOT, benchmark, cache, crypto, decorate, fs, getCss, highlight, hljs, jade, less, markdownIt, md, moment, path, slug;

  crypto = require('crypto');

  fs = require('fs');

  hljs = require('highlight.js');

  jade = require('jade');

  less = require('less');

  markdownIt = require('markdown-it');

  moment = require('moment');

  path = require('path');

  ROOT = path.dirname(__dirname);

  cache = {};

  benchmark = {
    start: function(message) {
      if (process.env.BENCHMARK) {
        return console.time(message);
      }
    },
    end: function(message) {
      if (process.env.BENCHMARK) {
        return console.timeEnd(message);
      }
    }
  };

  slug = function(value) {
    if (value == null) {
      value = '';
    }
    return value.toLowerCase().replace(/[ \t\n]/g, '-');
  };

  highlight = function(code, lang, subset) {
    var response;
    benchmark.start("highlight " + lang);
    response = (function() {
      switch (lang) {
        case 'no-highlight':
          return code;
        case void 0:
        case null:
        case '':
          return hljs.highlightAuto(code, subset).value;
        default:
          return hljs.highlight(lang, code).value;
      }
    })();
    benchmark.end("highlight " + lang);
    return response;
  };

  md = markdownIt('default', {
    html: true,
    linkify: true,
    typographer: true,
    highlight: highlight
  });

  md.renderer.rules.heading_open = function(tokens, idx) {
    var id;
    id = '';
    if (tokens[idx + 1].type === 'inline') {
      id = " id=\"header-" + (slug(tokens[idx + 1].content)) + "\"";
    }
    return "<h" + tokens[idx].hLevel + id + ">";
  };

  md.renderer.rules.heading_close = function(tokens, idx) {
    var link, name;
    link = '';
    if (tokens[idx - 1].type === 'inline') {
      name = slug("" + tokens[idx - 1].content);
      link = "<a class=\"permalink\" href=\"#header-" + name + "\">";
      link += '<i class="fa fa-link"></i></a>';
    }
    return "" + link + "</h" + tokens[idx].hLevel + ">\n";
  };

  getCss = function(colors, style, done) {
    var customColorPath, defaultColorPath, key, stylePath, tmp;
    key = "css-" + colors + "-" + style;
    if (cache[key]) {
      return done(null, cache[key]);
    }
    defaultColorPath = path.join(ROOT, 'styles', 'colors-default.less');
    tmp = "@import \"" + defaultColorPath + "\";\n";
    if (colors !== 'default') {
      customColorPath = path.join(ROOT, 'styles', "colors-" + colors + ".less");
      if (!fs.existsSync(customColorPath)) {
        customColorPath = colors;
        if (!fs.existsSync(customColorPath)) {
          return done(new Error("" + customColorPath + " does not exist!"));
        }
      }
      tmp += "@import \"" + customColorPath + "\";\n";
    }
    stylePath = path.join(ROOT, 'styles', "layout-" + style + ".less");
    if (!fs.existsSync(stylePath)) {
      stylePath = style;
      if (!fs.existsSync(stylePath)) {
        return done(new Error("" + stylePath + " does not exist!"));
      }
    }
    tmp += "@import \"" + stylePath + "\";\n";
    benchmark.start('less-compile');
    less.render(tmp, {
      compress: true
    }, function(err, css) {
      benchmark.end('less-compile');
      if (!err) {
        cache[key] = css;
      }
      return done(err, css);
    });
  };

  decorate = function(api) {
    var action, example, item, name, resource, resourceGroup, _i, _len, _ref, _results;
    _ref = api.resourceGroups || [];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      resourceGroup = _ref[_i];
      resourceGroup.elementId = slug(resourceGroup.name);
      resourceGroup.elementLink = "#" + resourceGroup.elementId;
      _results.push((function() {
        var _j, _len1, _ref1, _results1;
        _ref1 = resourceGroup.resources || [];
        _results1 = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          resource = _ref1[_j];
          resource.elementId = slug("" + resourceGroup.name + "-" + resource.name);
          resource.elementLink = "#" + resource.elementId;
          _results1.push((function() {
            var _k, _len2, _ref2, _results2;
            _ref2 = resource.actions || [];
            _results2 = [];
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              action = _ref2[_k];
              action.elementId = slug("" + resourceGroup.name + "-" + resource.name + "-" + action.method);
              action.elementLink = "#" + action.elementId;
              action.methodLower = action.method.toLowerCase();
              if (!action.parameters || !action.parameters.length) {
                action.parameters = resource.parameters;
              }
              _results2.push((function() {
                var _l, _len3, _ref3, _results3;
                _ref3 = action.examples || [];
                _results3 = [];
                for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
                  example = _ref3[_l];
                  _results3.push((function() {
                    var _len4, _m, _ref4, _results4;
                    _ref4 = ['requests', 'responses'];
                    _results4 = [];
                    for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
                      name = _ref4[_m];
                      _results4.push((function() {
                        var _len5, _n, _ref5, _results5;
                        _ref5 = example[name] || [];
                        _results5 = [];
                        for (_n = 0, _len5 = _ref5.length; _n < _len5; _n++) {
                          item = _ref5[_n];
                          _results5.push(item.hasContent = item.description || Object.keys(item.headers).length || item.body || item.schema);
                        }
                        return _results5;
                      })());
                    }
                    return _results4;
                  })());
                }
                return _results3;
              })());
            }
            return _results2;
          })());
        }
        return _results1;
      })());
    }
    return _results;
  };

  exports.getConfig = function() {
    return {
      formats: ['1A'],
      options: [
        {
          name: 'colors',
          description: 'Color scheme name or path to custom style',
          "default": 'default'
        }, {
          name: 'condense-nav',
          description: 'Condense navigation links',
          boolean: true,
          "default": true
        }, {
          name: 'full-width',
          description: 'Use full window width',
          boolean: true,
          "default": false
        }, {
          name: 'layout',
          description: 'Layout name or path to custom layout',
          "default": 'default'
        }, {
          name: 'style',
          description: 'Custom style overrides'
        }
      ]
    };
  };

  exports.render = function(input, options, done) {
    if (done == null) {
      done = options;
      options = {};
    }
    if (options.themeCondenseNav == null) {
      options.themeCondenseNav = options.condenseNav;
    }
    if (options.themeFullWidth == null) {
      options.themeFullWidth = options.fullWidth;
    }
    if (options.themeColors == null) {
      options.themeColors = 'default';
    }
    if (options.themeStyle == null) {
      options.themeStyle = 'default';
    }
    if (options.themeLayout == null) {
      options.themeLayout = path.join(ROOT, 'templates', 'index.jade');
    }
    if (options.themeCondenseNav == null) {
      options.themeCondenseNav = true;
    }
    if (options.themeFullWidth == null) {
      options.themeFullWidth = false;
    }
    benchmark.start('decorate');
    decorate(input);
    benchmark.end('decorate');
    benchmark.start('css-total');
    return getCss(options.themeColors, options.themeStyle, function(err, lessOutput) {
      var compileOptions, fn, html, key, locals, renderer, value, _ref;
      if (err) {
        return done(err);
      }
      benchmark.end('css-total');
      locals = {
        api: input,
        condenseNav: options.themeCondenseNav,
        css: lessOutput.css,
        fullWidth: options.themeFullWidth,
        date: moment,
        hash: function(value) {
          return crypto.createHash('md5').update(value.toString()).digest('hex');
        },
        highlight: highlight,
        markdown: function(content) {
          return md.render(content);
        },
        slug: slug
      };
      _ref = options.locals || {};
      for (key in _ref) {
        value = _ref[key];
        locals[key] = value;
      }
      compileOptions = {
        filename: options.themeLayout,
        self: true,
        compileDebug: false
      };
      if (cache[options.themeLayout]) {
        renderer = cache[options.themeLayout];
      } else {
        benchmark.start('jade-compile');
        try {
          fn = jade.compileFile(options.themeLayout, compileOptions);
        } catch (_error) {
          err = _error;
          return done(err);
        }
        benchmark.end('jade-compile');
        renderer = cache[options.themeLayout] = fn;
      }
      benchmark.start('call-template');
      try {
        html = renderer(locals);
      } catch (_error) {
        err = _error;
        return done(err);
      }
      benchmark.end('call-template');
      return done(null, html);
    });
  };

}).call(this);
