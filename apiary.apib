FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# onebox-crm-api

API to share CRM data to our integrated clients.

To do so, we have used a API Blueprint standard and apiary.io as a main editing and mocking tool:
+ [API Blueprint](https://apiblueprint.org/)
+ [apiary.io](https://app.apiary.io/oneboxcrmapi)

## Buyers Collection [/crm-api/v1.0/buyers{?id,start_date,end_date,page}]
List all the key data from the clients which have performed at least one purchase. It is also allowed filtering between dates and paging.

### List All Buyers [GET]

+ Parameters
    + id (optional, text) ... Filter by a given buyer identified by its email
    + start_date (optional, date) ... Filter by starting date (`2015-08-05T08:40:51.620Z`)
    + end_date (optional, date) ... Filter by final date
    + page (optional, number) ... Paginate response to the given page number

+ Response 200 (application/json)

        [
            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 2048
                    }, {
                        "choice": "Python",
                        "votes": 1024
                    }, {
                        "choice": "Objective-C",
                        "votes": 512
                    }, {
                        "choice": "Ruby",
                        "votes": 256
                    }
                ]
            }
        ]

## Purchases Collection [/crm-api/v1.0/purchases{?id,start_date,end_date,page}]
List all the key data from the clients which have performed at least one purchase. It is also allowed filtering between dates and paging.

### List All Purchases [GET]

+ Parameters
    + id (optional, text) ... Filter by a given buyer identified by its email
    + start_date (optional, date) ... Filter by starting date (`2015-08-05T08:40:51.620Z`)
    + end_date (optional, date) ... Filter by final date
    + page (optional, number) ... Paginate response to the given page number

+ Response 200 (application/json)

        [
            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 2048
                    }, {
                        "choice": "Python",
                        "votes": 1024
                    }, {
                        "choice": "Objective-C",
                        "votes": 512
                    }, {
                        "choice": "Ruby",
                        "votes": 256
                    }
                ]
            }
        ]


